# CSR access test
# Generated by gen_csr_test.py (part of riscv-dv)
# Manual edits to fit with BSP and enhance debug
.include "user_define.h"
#define MSTATUS_FS          0x00006000
.section .text.start
.globl _start
.section .text
#.include "user_init.s"
.type _start, @function

_start:
    j _start_main

.globl _start_main
.section .text
_start_main:


###############################################################################
#
# Generated code starts...
#
###############################################################################
_start0:

    # Load BF16 values directly into floating-point registers
    la t0, bf16_val1         # Load address of bf16_val1 into t0
    flw ft0, 0(t0)           # Load 32-bit floating-point from address in t0 into ft0

    la t1, bf16_val2         # Load address of bf16_val2 into t1
    flw ft1, 0(t1)           # Load 32-bit floating-point from address in t1 into ft1

    # Perform the bf16.max operation
    #bf16.max ft2, ft0, ft1   # ft2 = max(ft0, ft1)
    
    bf16.fmadd	ft4,ft3,ft1,ft0
    
    # Store the result back to memory as 32-bit floating-point
    la t2, result            # Load address of result into t2
    fsw ft2, 0(t2)           # Store 32-bit floating-point result at address in t2
    
    
    # Load immediate values into integer registers
    li t0, 0x4220      # Load the bit pattern for 42.0 (IEEE 754 single-precision)
    li t1, 0x41b8      # Load the bit pattern for 23.0 (IEEE 754 single-precision)
    
    # Move the integer bit patterns to floating-point registers
    #fmv.w.x f0, t0         # Move bit pattern in t0 to f0
    #fmv.w.x f1, t1         # Move bit pattern in t1 to f1
    
    # Add the two floating-point values
    #fadd.s f2, f0, f1      # f2 = f0 + f1
    add x1, x2, x3
    add x1, x2, x3
    add x1, x2, x3
    add x1, x2, x3
    #bf16.max f6, f1, f2
    add x1, x2, x3
    add x1, x2, x3
    add x1, x2, x3
    add x1, x2, x3
    #fadd.s  f1, f2, f3
j test_done
	 #j csr_fail
	bne x4, x1, csr_pass

_end0:

################################################################################
#
# Generated code ends...
#
################################################################################
test_done:
    lui a0,print_port>>12
    addi a1,zero,'\n'
    sw a1,0(a0)
    add a1,zero,x7
    sw a1,0(a0)
    addi a1,zero,'V'
    sw a1,0(a0)
    #bf16.max f3, f1, f2
    addi a1,zero,'3'
    sw a1,0(a0)
    addi a1,zero,'2'
    sw a1,0(a0)
    addi a1,zero,' '
    sw a1,0(a0)
    addi a1,zero,'D'
    sw a1,0(a0)
    addi a1,zero,'O'
    sw a1,0(a0)
    addi a1,zero,'N'
    sw a1,0(a0)
    addi a1,zero,'E'
    sw a1,0(a0)
    addi a1,zero,'\n'
    sw a1,0(a0)
    sw a1,0(a0)
csr_pass:
    li x18, 123456789
    li x17, 0x20000000
    sw x18,0(x17)
    wfi

csr_fail:
    lui a0,print_port>>12
    addi a1,zero,'\n'
    sw a1,0(a0)
    addi a1,zero,'C'
    sw a1,0(a0)
    addi a1,zero,'V'
    sw a1,0(a0)
    addi a1,zero,'3'
    sw a1,0(a0)
    addi a1,zero,'2'
    sw a1,0(a0)
    addi a1,zero,' '
    sw a1,0(a0)
    addi a1,zero,'F'
    sw a1,0(a0)
    addi a1,zero,'A'
    sw a1,0(a0)
    addi a1,zero,'I'
    sw a1,0(a0)
    addi a1,zero,'L'
    sw a1,0(a0)
    addi a1,zero,'\n'
    sw a1,0(a0)
    sw a1,0(a0)

    li x18, 1
    li x17, 0x20000000
    sw x18,0(x17)
    wfi

.section .data
.align 4
bf16_val1: .word 0x3f80  # BF16 value (1.0 in BF16 stored as 32-bit float)
bf16_val2: .word 0x4000  # BF16 value (2.0 in BF16 stored as 32-bit float)
result:   .space 4           # Space for the result (BF16 value, but stored as 32-bit float)
